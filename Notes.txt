                                                         ___________
                                                        |           |
                                                        |   React   |
                                                        |___________|   
                                            

What is React?
--------------

- React is a client side JavaScript library.
- Used to build dynamic user interfaces.
- Components based (An app made up of multiple smaller apps (not really)).
- Industry Standard Framework.


Is React a library or a framework?
----------------------------------

- React is technically a library. It's more bare bones but we can easy install things that we need.
- And as it is a direct competitor to Vue, Angular, and etc, it is refered to as a framework.

Why Use React?
--------------

- Powerful UI/Front-End : Can be used to route (which is done generally by server).
- Easy to organize code.
- Because each app is made of components, it can be reused across applications.
- Very light and fast.
- Makes things much easier with a virtual DOM that can be used to update some parts without refreshing the entire page.
- INDUSTRY STANDARD.

Component Based UI
------------------

- Each element is its own component.
- Very organized and dynamic.
- Props (properties), States, Logic and much more!

Create React App
----------------

- Create-React-App is like a package full of scripts that setup your folder structures for React Development.
- React is a SPA (Single Page Application) which has its main view in index.html
- The div with the id of root, is where our main app will live and output on a browser.
- Anything we create will be children of this root! (Evidence can be found in index.js where app.js {our main application} is rendered
  in the root element via DOM manipulation using Vanilla JS)
* Development : While deploying, we don't deploy src or anything. We deploy what we get from npm run build, which makes file look very different.
- Generally we used to have class based components, which have now been replaced by function based components. 
- A class component could have state while a function component could not. But with Hooks, that has changed!

JSX
---

- JSX is JavaScript Extension, which helps us write JS Extension for HTML Code.
- Always requires a parent element (div)
- If you do not want a parent element like div, but still it is required to have a parent element. 
  So we use React.Fragment. We can also use <> </> for the same ghost element (Not good practice)!
- We can use ternary operators for conditionals. We can also use && where it executes second statement if first is true.