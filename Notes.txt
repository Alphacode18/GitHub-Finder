                                                         ___________
                                                        |           |
                                                        |   React   |
                                                        |___________|   
                                            

What is React?
--------------

- React is a client side JavaScript library.
- Used to build dynamic user interfaces.
- Components based (An app made up of multiple smaller apps (not really)).
- Industry Standard Framework.


Is React a library or a framework?
----------------------------------

- React is technically a library. It's more bare bones but we can easy install things that we need.
- And as it is a direct competitor to Vue, Angular, and etc, it is refered to as a framework.

Why Use React?
--------------

- Powerful UI/Front-End : Can be used to route (which is done generally by server).
- Easy to organize code.
- Because each app is made of components, it can be reused across applications.
- Very light and fast.
- Makes things much easier with a virtual DOM that can be used to update some parts without refreshing the entire page.
- INDUSTRY STANDARD.

Component Based UI
------------------

- Each element is its own component.
- Very organized and dynamic.
- Props (properties), States, Logic and much more!

Create React App
----------------

- Create-React-App is like a package full of scripts that setup your folder structures for React Development.
- React is a SPA (Single Page Application) which has its main view in index.html
- The div with the id of root, is where our main app will live and output on a browser.
- Anything we create will be children of this root! (Evidence can be found in index.js where app.js {our main application} is rendered
  in the root element via DOM manipulation using Vanilla JS)
* Development : While deploying, we don't deploy src or anything. We deploy what we get from npm run build, which makes file look very different.
- Generally we used to have class based components, which have now been replaced by function based components. 
- A class component could have state while a function component could not. But with Hooks, that has changed!

JSX
---

- JSX is JavaScript Extension, which helps us write JS Extension for HTML Code.
- Always requires a parent element (div)
- If you do not want a parent element like div, but still it is required to have a parent element. 
  So we use React.Fragment. We can also use <> </> for the same ghost element (Not good practice)!
- We can use ternary operators for conditionals. We can also use && where it executes second statement if first is true.

Components, Props and Proptypes
-------------------------------

- Simply create a components folder and create your components inside.
- Export your components, import them in app.js
- Components can be used by <component />
- In app.js, you can pass in properties <component title="component"/> and this property
  can be utilized in the component by this.props.title. Just like EJS!
- We can also create a static defaultProps object with the required keys!
- PropTypes are used in checking. In static propTypes = {} define the type conditions for all props.
- Example {title: PropTypes.string.isRequired}. This helps ensure type
- Does not break the application but initiates console warnings.

Component State
---------------

- State is a data set about the component that may change over its lifetime
- In the class, we can define a state = {} object and pass in key-value pairs which
  will be afterwards used in the UI code.

Lists and State as Props
------------------------

- Have an array in the current state.
- Use Higher order functions like map(), filter() etc!
- Good practice for each child (list element) to have a unique key prop like id, etc!
- States can be passed through as props.

Stateless Function Components
-----------------------------

- Class based components without state can be converted to function based components.
- Props are now passed in as parameters.
- In cases where you have defaultProps and propTypes, just use the name of the componet,
  and put .defaultProps, and .propTypes
- Heavily use destructuring. To destructure in parametes use ({users}) and if you want to 
  destructure further, use ({users: {login, avatar_url, html_url}})

HTTP Request and Updating State
-------------------------------

- App level states must be in App.js when used without hooks or redux.
- componentDidMount() is a lifecycle method used for HTTP request when components mount success
  fully.
- We do not change state directly by this.state.laoding = true; Rather we use this.setState({});

Events and Search Component
---------------------------

- Essential to have a component scope state for forms.
- With that state it is essential to have onChange(event). event has access to all events and their subsequent properties.
- [event.taget.name] can be used to generalize state change across input forms!
- For access to global this keyword, use arrow functions!

Passing Props Up and Search
---------------------------

- In react when returning a function, it actually means returning the function based component. So Spinner() would be 'return <Spinner />
- Whenever we retrieve data from endpoint, the result is in response.data.items (Especially for GitHub).


Clearing
--------

- It is generally easy to clear the screen by removing the data from the state!

Routing
-------

- It is generally not a good practice to use <a> tags in React because they mess up the state! Use <Link>

Hooks
-----

- Hooks are functions that let us hook into react state and life cycle functions from a functional component.

useState : For Getting State
useEffect: Life cycle functions
useContext, useReducer, useRefs